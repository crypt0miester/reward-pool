{"version":3,"sources":["../src/farm.ts","../src/utils.ts","../src/idl/farming-idl.ts","../src/constant.ts"],"sourcesContent":["import { BN, EventParser } from \"@coral-xyz/anchor\";\nimport { TOKEN_PROGRAM_ID } from \"@solana/spl-token\";\nimport {\n  Cluster,\n  ComputeBudgetProgram,\n  Connection,\n  ParsedAccountData,\n  PublicKey,\n  SYSVAR_CLOCK_PUBKEY,\n  Transaction,\n  TransactionInstruction,\n} from \"@solana/web3.js\";\n\nimport { FarmProgram, Opt, PoolState, UserState } from \"./types\";\nimport {\n  chunks,\n  getFarmInfo,\n  getFarmProgram,\n  getOrCreateATAInstruction,\n  parseLogs,\n} from \"./utils\";\nimport { FARM_PROGRAM_ID } from \"./constant\";\n\n\n\nexport async function chunkedGetMultipleAccountInfos(\n  connection: Connection,\n  pks: PublicKey[],\n  chunkSize: number = 100\n) {\n  const accountInfos = (\n    await Promise.all(\n      chunks(pks, chunkSize).map((chunk) =>\n        connection.getMultipleAccountsInfo(chunk)\n      )\n    )\n  ).flat();\n\n  return accountInfos;\n}\n\nconst chunkedFetchMultipleUserAccount = async (\n  program: FarmProgram,\n  pks: PublicKey[],\n  chunkSize: number = 100\n) => {\n  const accounts = (\n    await Promise.all(\n      chunks(pks, chunkSize).map((chunk) =>\n        program.account.user.fetchMultiple(chunk)\n      )\n    )\n  ).flat();\n\n  return accounts.filter(Boolean);\n};\n\nconst chunkedFetchMultiplePoolAccount = async (\n  program: FarmProgram,\n  pks: PublicKey[],\n  chunkSize: number = 100\n) => {\n  const accounts = (\n    await Promise.all(\n      chunks(pks, chunkSize).map((chunk) =>\n        program.account.pool.fetchMultiple(chunk)\n      )\n    )\n  ).flat();\n\n  return accounts.filter(Boolean);\n};\n\nconst getAllPoolState = async (\n  farmMints: Array<PublicKey>,\n  program: FarmProgram\n) => {\n  const poolStates = (await chunkedFetchMultiplePoolAccount(\n    program,\n    farmMints\n  )) as Array<PoolState>;\n\n  return poolStates;\n};\n\nconst MAX_CLAIM_ALL_ALLOWED = 2;\n\nexport class PoolFarmImpl {\n  private opt: Opt = {\n    cluster: \"mainnet-beta\",\n  };\n\n  private constructor(\n    public address: PublicKey,\n    private program: FarmProgram,\n    private eventParser: EventParser,\n    public poolState: PoolState,\n    opt: Opt\n  ) {\n    this.opt = opt;\n  }\n\n  public static async create(\n    connection: Connection,\n    farm: PublicKey,\n    opt?: { cluster?: Cluster }\n  ) {\n    const cluster = opt?.cluster ?? \"mainnet-beta\";\n    const { program } = getFarmProgram(connection);\n    const eventParser = new EventParser(FARM_PROGRAM_ID, program.coder);\n\n    const poolState = await program.account.pool.fetchNullable(farm);\n\n    if (!poolState) throw new Error(\"No pool state found\");\n\n    return new PoolFarmImpl(farm, program, eventParser, poolState, {\n      cluster,\n    });\n  }\n\n  public static async createMultiple(\n    connection: Connection,\n    farmList: Array<PublicKey>,\n    opt?: {\n      cluster?: Cluster;\n    }\n  ) {\n    const cluster = opt?.cluster ?? \"mainnet-beta\";\n    const { program } = getFarmProgram(connection);\n    const eventParser = new EventParser(FARM_PROGRAM_ID, program.coder);\n\n    const poolsState = await getAllPoolState(farmList, program);\n\n    return poolsState.map((poolState, idx) => {\n      const address = farmList[idx];\n      return new PoolFarmImpl(address, program, eventParser, poolState, {\n        cluster,\n      });\n    });\n  }\n\n  public static async getFarmAddressesByPoolAddress(\n    poolAddress: PublicKey,\n    cluster?: Cluster\n  ) {\n    const apiData = await getFarmInfo(cluster);\n\n    const farms = apiData.filter(\n      (farm) => farm.pool_address === poolAddress.toBase58()\n    );\n\n    if (!farms.length) throw new Error(\"No pool address found \");\n\n    return farms.map((farm) => ({\n      farmAddress: new PublicKey(farm.farming_pool),\n      APY: farm.farming_apy,\n      expired: farm.farm_expire,\n    }));\n  }\n\n  public static async getFarmAddressesByLp(\n    lpAddress: PublicKey,\n    cluster?: Cluster\n  ) {\n    const apiData = await getFarmInfo(cluster);\n\n    const farms = apiData.filter(\n      (farm) => farm.lp_mint === lpAddress.toBase58()\n    );\n\n    if (!farms.length) throw new Error(\"No pool address found \");\n\n    return farms.map((farm) => ({\n      farmAddress: new PublicKey(farm.farming_pool),\n      APY: farm.farming_apy,\n      expired: farm.farm_expire,\n    }));\n  }\n\n  public static async getUserBalances(\n    connection: Connection,\n    owner: PublicKey,\n    farmMints: Array<PublicKey>\n  ) {\n    const { program } = getFarmProgram(connection);\n\n    const userStakingPda = farmMints.map((mint) => {\n      const [userStakingAddress] = PublicKey.findProgramAddressSync(\n        [owner.toBuffer(), mint.toBuffer()],\n        FARM_PROGRAM_ID\n      );\n\n      return userStakingAddress;\n    });\n\n    const usersState = (await chunkedFetchMultipleUserAccount(\n      program,\n      userStakingPda,\n      100\n    )) as Array<UserState>;\n    return usersState.reduce((acc, userState) => {\n      const userStaked = userState.balanceStaked;\n      if (userStaked.isZero()) return acc;\n      acc.set(userState.pool.toBase58(), userStaked);\n      return acc;\n    }, new Map<string, BN>());\n  }\n\n  public static async claimAll(\n    connection: Connection,\n    owner: PublicKey,\n    farmMints: Array<PublicKey>,\n    opt?: {\n      cluster?: Cluster;\n    }\n  ) {\n    const { program } = getFarmProgram(connection);\n\n    const poolFarmsImpl = await PoolFarmImpl.createMultiple(\n      connection,\n      farmMints,\n      { cluster: opt?.cluster }\n    );\n\n    const claimAllTxs = await Promise.all(\n      poolFarmsImpl.map(async (poolFarmImpl) => {\n        const claimMethod = await poolFarmImpl.claimMethodBuilder(owner);\n        return await claimMethod.transaction();\n      })\n    );\n\n    const chunkedClaimAllTx = chunks(claimAllTxs, MAX_CLAIM_ALL_ALLOWED);\n\n    const { blockhash, lastValidBlockHeight } =\n      await connection.getLatestBlockhash(\"confirmed\");\n    return Promise.all(\n      chunkedClaimAllTx.map(async (claimAllTx) => {\n        return new Transaction({\n          feePayer: owner,\n          blockhash,\n          lastValidBlockHeight,\n        })\n          .add(ComputeBudgetProgram.setComputeUnitLimit({ units: 1_400_000 }))\n          .add(...claimAllTx);\n      })\n    );\n  }\n\n  async getUserBalance(owner: PublicKey) {\n    const [userStakingAddress] = PublicKey.findProgramAddressSync(\n      [owner.toBuffer(), this.address.toBuffer()],\n      FARM_PROGRAM_ID\n    );\n\n    const userState = await this.program.account.user.fetchNullable(\n      userStakingAddress\n    );\n\n    return userState.balanceStaked;\n  }\n\n  getUserPda(owner: PublicKey) {\n    const [userPda] = PublicKey.findProgramAddressSync(\n      [owner.toBuffer(), this.address.toBuffer()],\n      this.program.programId\n    );\n\n    return userPda;\n  }\n\n  async getUserState(owner: PublicKey) {\n    const userPda = this.getUserPda(owner);\n\n    return this.program.account.user.fetchNullable(owner);\n  }\n\n  private async createUserInstruction(owner: PublicKey) {\n    const userPda = this.getUserPda(owner);\n\n    const userState = await this.getUserState(userPda);\n\n    if (userState) return undefined;\n\n    return await this.program.methods\n      .createUser()\n      .accounts({\n        owner,\n        pool: this.address,\n        user: userPda,\n      })\n      .instruction();\n  }\n\n  public async deposit(owner: PublicKey, amount: BN) {\n    const userPda = this.getUserPda(owner);\n\n    const instructions: TransactionInstruction[] = [];\n\n    const userCreateInstruction = await this.createUserInstruction(owner);\n    userCreateInstruction && instructions.push(userCreateInstruction);\n\n    const [userStakingATA, userStakingIx] = await getOrCreateATAInstruction(\n      this.poolState.stakingMint,\n      owner,\n      this.program.provider.connection\n    );\n    userStakingIx && instructions.push(userStakingIx);\n\n    const depositTx = await this.program.methods\n      .deposit(amount)\n      .accounts({\n        owner,\n        user: userPda,\n        pool: this.address,\n        stakeFromAccount: userStakingATA,\n        stakingVault: this.poolState.stakingVault,\n        tokenProgram: TOKEN_PROGRAM_ID,\n      })\n      .preInstructions(instructions)\n      .transaction();\n\n    return new Transaction({\n      feePayer: owner,\n      ...(await this.program.provider.connection.getLatestBlockhash(\n        \"finalized\"\n      )),\n    }).add(depositTx);\n  }\n\n  public async withdraw(owner: PublicKey, amount: BN) {\n    const userPda = this.getUserPda(owner);\n\n    const instructions: TransactionInstruction[] = [];\n    const [userStakingATA, userStakingIx] = await getOrCreateATAInstruction(\n      this.poolState.stakingMint,\n      owner,\n      this.program.provider.connection\n    );\n    userStakingIx && instructions.push(userStakingIx);\n\n    const withdrawTx = await this.program.methods\n      .withdraw(amount)\n      .accounts({\n        owner,\n        pool: this.address,\n        stakeFromAccount: userStakingATA,\n        stakingVault: this.poolState.stakingVault,\n        tokenProgram: TOKEN_PROGRAM_ID,\n        user: userPda,\n      })\n      .preInstructions(instructions)\n      .transaction();\n\n    return new Transaction({\n      feePayer: owner,\n      ...(await this.program.provider.connection.getLatestBlockhash(\n        \"finalized\"\n      )),\n    }).add(withdrawTx);\n  }\n\n  private async claimMethodBuilder(owner: PublicKey) {\n    const userPda = this.getUserPda(owner);\n\n    const isDual = !this.poolState.rewardAMint.equals(\n      this.poolState.rewardBMint\n    );\n\n    const preInstructions: TransactionInstruction[] = [];\n\n    const [[userRewardAATA, userRewardAIx], [userRewardBATA, userRewardBIx]] =\n      await Promise.all(\n        isDual\n          ? [\n              getOrCreateATAInstruction(\n                this.poolState.rewardAMint,\n                owner,\n                this.program.provider.connection\n              ),\n              getOrCreateATAInstruction(\n                this.poolState.rewardBMint,\n                owner,\n                this.program.provider.connection\n              ),\n            ]\n          : [\n              getOrCreateATAInstruction(\n                this.poolState.rewardAMint,\n                owner,\n                this.program.provider.connection\n              ),\n              [undefined, undefined],\n            ]\n      );\n    userRewardAIx && preInstructions.push(userRewardAIx);\n    userRewardBIx && preInstructions.push(userRewardBIx);\n\n    return this.program.methods\n      .claim()\n      .accounts({\n        owner,\n        pool: this.address,\n        rewardAAccount: userRewardAATA,\n        rewardBAccount: isDual ? userRewardBATA : userRewardAATA,\n        rewardAVault: this.poolState.rewardAVault,\n        rewardBVault: this.poolState.rewardBVault,\n        stakingVault: this.poolState.stakingVault,\n        tokenProgram: TOKEN_PROGRAM_ID,\n        user: userPda,\n      })\n      .preInstructions(preInstructions);\n  }\n\n  public async claim(owner: PublicKey) {\n    const claimTx = await (await this.claimMethodBuilder(owner)).transaction();\n\n    return new Transaction({\n      feePayer: owner,\n      ...(await this.program.provider.connection.getLatestBlockhash(\n        \"finalized\"\n      )),\n    }).add(claimTx);\n  }\n\n  static async getClaimableRewards(\n    owner: PublicKey,\n    farmMints: Array<PublicKey>,\n    connection: Connection\n  ) {\n    const { program } = getFarmProgram(connection);\n\n    const usersPda = farmMints.map((mint) => {\n      const [userStakingAddress] = PublicKey.findProgramAddressSync(\n        [owner.toBuffer(), mint.toBuffer()],\n        FARM_PROGRAM_ID\n      );\n\n      return userStakingAddress;\n    });\n\n    const accountsToFetched = [SYSVAR_CLOCK_PUBKEY, ...farmMints, ...usersPda];\n    const accounts = await chunkedGetMultipleAccountInfos(\n      connection,\n      accountsToFetched\n    );\n\n    const [clockAccountInfo, ...restAccounts] = accounts;\n    const clockData = clockAccountInfo?.data;\n    const onChainTime = Number(clockData.readBigInt64LE(8 * 4));\n\n    const poolStatesMap = new Map();\n    for (let i = 0; i < farmMints.length; i++) {\n      const farmMint = farmMints[i];\n      const poolAccount = restAccounts[i];\n      const userPdaAccount = restAccounts[i + farmMints.length];\n\n      const poolState = poolAccount?.data\n        ? (program.coder.accounts.decode(\"pool\", poolAccount.data) as PoolState)\n        : undefined;\n      const userState = userPdaAccount?.data\n        ? (program.coder.accounts.decode(\n            \"user\",\n            userPdaAccount.data\n          ) as UserState)\n        : undefined;\n      if (!poolState) throw new Error(\"Pool state not found\");\n\n      poolStatesMap.set(farmMint.toBase58(), {\n        poolState,\n        userState,\n      });\n    }\n\n    return Array.from(poolStatesMap.entries()).reduce<\n      Map<string, { rewardA: BN; rewardB: BN }>\n    >((accValue, [farmMint, { poolState, userState }]) => {\n      const rewardDurationEnd = poolState.rewardDurationEnd.toNumber();\n      const lastTimeRewardApplicable =\n        onChainTime < rewardDurationEnd ? onChainTime : rewardDurationEnd;\n      const { a, b } = rewardPerToken(poolState, lastTimeRewardApplicable);\n\n      if (!userState || !poolState) return accValue;\n\n      const rewardA: BN = userState.balanceStaked\n        .mul(a.sub(userState.rewardAPerTokenComplete))\n        .div(new BN(1_000_000_000))\n        .add(userState.rewardAPerTokenPending);\n      const rewardB: BN = userState.balanceStaked\n        .mul(b.sub(userState.rewardBPerTokenComplete))\n        .div(new BN(1_000_000_000))\n        .add(userState.rewardBPerTokenPending);\n\n      if (rewardA.isZero() && rewardB.isZero()) return accValue;\n      accValue.set(farmMint, {\n        rewardA,\n        rewardB,\n      });\n\n      return accValue;\n    }, new Map());\n  }\n}\n\nfunction rewardPerToken(pool: PoolState, lastTimeRewardApplicable: number) {\n  let totalStake = pool.totalStaked;\n  if (totalStake.isZero()) {\n    return {\n      a: pool.rewardAPerTokenStored,\n      b: pool.rewardBPerTokenStored,\n    };\n  }\n  let timePeriod = new BN(\n    lastTimeRewardApplicable - pool.lastUpdateTime.toNumber()\n  );\n  return {\n    a: pool.rewardAPerTokenStored.add(\n      timePeriod.mul(pool.rewardARateU128).div(totalStake)\n    ),\n    b: pool.rewardBPerTokenStored.add(\n      timePeriod.mul(pool.rewardBRateU128).div(totalStake)\n    ),\n  };\n}\n","import { AnchorProvider, EventParser, Program } from \"@coral-xyz/anchor\";\nimport {\n  Cluster,\n  Connection,\n  Keypair,\n  LAMPORTS_PER_SOL,\n  PublicKey,\n  TransactionInstruction,\n} from \"@solana/web3.js\";\nimport {\n  ASSOCIATED_TOKEN_PROGRAM_ID,\n  createAssociatedTokenAccountInstruction,\n  getAssociatedTokenAddress,\n  TOKEN_PROGRAM_ID,\n} from \"@solana/spl-token\";\nimport { Farming, IDL } from \"./idl/farming-idl\";\nimport { Amm as AmmIdl, IDL as AmmIDL } from \"./idl/amm-idl\";\nimport {\n  AMM_PROGRAM_ID,\n  FARMING_API_ENDPOINT,\n  FARM_PROGRAM_ID,\n} from \"./constant\";\nimport { PoolInfo } from \"./types\";\nimport NodeWallet from \"@coral-xyz/anchor/dist/cjs/nodewallet\";\n\nexport const getFarmProgram = (connection: Connection) => {\n  const wallet = new NodeWallet(Keypair.generate());\n  const provider = new AnchorProvider(\n    connection,\n    wallet,\n    AnchorProvider.defaultOptions()\n  );\n  const program = new Program<Farming>(IDL, FARM_PROGRAM_ID, provider);\n\n  return { provider, program };\n};\n\nexport const getAmmProgram = (connection: Connection, programId?: string) => {\n  const wallet = new NodeWallet(Keypair.generate());\n  const provider = new AnchorProvider(\n    connection,\n    wallet,\n    AnchorProvider.defaultOptions()\n  );\n  const ammProgram = new Program<AmmIdl>(\n    AmmIDL,\n    programId ?? AMM_PROGRAM_ID,\n    provider\n  );\n\n  return { provider, ammProgram };\n};\n\nexport const getFarmInfo = async (cluster: Cluster = \"mainnet-beta\") => {\n  const data = await fetch(FARMING_API_ENDPOINT[cluster]).then((res) =>\n    res.json()\n  );\n\n  return data as PoolInfo[];\n};\n\nexport const parseLogs = <T>(eventParser: EventParser, logs: string[]) => {\n  if (!logs.length) throw new Error(\"No logs found\");\n\n  for (const event of eventParser?.parseLogs(logs)) {\n    return event.data as T;\n  }\n\n  throw new Error(\"No events found\");\n};\n\nexport const getOrCreateATAInstruction = async (\n  tokenMint: PublicKey,\n  owner: PublicKey,\n  connection: Connection\n): Promise<[PublicKey, TransactionInstruction?]> => {\n  let toAccount;\n  try {\n    toAccount = await getAssociatedTokenAddress(\n      tokenMint,\n      owner,\n      false,\n      TOKEN_PROGRAM_ID,\n      ASSOCIATED_TOKEN_PROGRAM_ID,\n    );\n    const account = await connection.getAccountInfo(toAccount);\n    if (!account) {\n      const ix = createAssociatedTokenAccountInstruction(\n        owner,\n        toAccount,\n        owner,\n        tokenMint,\n        TOKEN_PROGRAM_ID,\n        ASSOCIATED_TOKEN_PROGRAM_ID,\n      );\n      return [toAccount, ix];\n    }\n    return [toAccount, undefined];\n  } catch (e) {\n    /* handle error */\n    console.error(\"Error::getOrCreateATAInstruction\", e);\n    throw e;\n  }\n};\n\nexport function chunks<T>(array: T[], size: number): T[][] {\n  return Array.apply(0, new Array(Math.ceil(array.length / size))).map(\n    (_, index) => array.slice(index * size, (index + 1) * size)\n  );\n}\n\nexport const airDropSol = async (\n  connection: Connection,\n  publicKey: PublicKey,\n  amount = 1\n) => {\n  try {\n    const airdropSignature = await connection.requestAirdrop(\n      publicKey,\n      amount * LAMPORTS_PER_SOL\n    );\n    const latestBlockHash = await connection.getLatestBlockhash();\n    await connection.confirmTransaction({\n      blockhash: latestBlockHash.blockhash,\n      lastValidBlockHeight: latestBlockHash.lastValidBlockHeight,\n      signature: airdropSignature,\n    });\n  } catch (error) {\n    console.error(error);\n    throw error;\n  }\n};\n","export type Farming = {\n  \"version\": \"0.2.2\",\n  \"name\": \"farming\",\n  \"docs\": [\n    \"Dual farming program\"\n  ],\n  \"instructions\": [\n    {\n      \"name\": \"initializePool\",\n      \"docs\": [\n        \"Initializes a new pool. Able to create pool with single reward by passing the same Mint account for reward_a_mint and reward_a_mint\"\n      ],\n      \"accounts\": [\n        {\n          \"name\": \"pool\",\n          \"isMut\": true,\n          \"isSigner\": false,\n          \"docs\": [\n            \"Global accounts for the staking instance.\"\n          ]\n        },\n        {\n          \"name\": \"stakingMint\",\n          \"isMut\": false,\n          \"isSigner\": false,\n          \"docs\": [\n            \"Staking mint\"\n          ]\n        },\n        {\n          \"name\": \"stakingVault\",\n          \"isMut\": true,\n          \"isSigner\": false,\n          \"docs\": [\n            \"Staking vault PDA\"\n          ]\n        },\n        {\n          \"name\": \"rewardAMint\",\n          \"isMut\": false,\n          \"isSigner\": false,\n          \"docs\": [\n            \"Reward A mint\"\n          ]\n        },\n        {\n          \"name\": \"rewardAVault\",\n          \"isMut\": true,\n          \"isSigner\": false,\n          \"docs\": [\n            \"Reward A vault PDA\"\n          ]\n        },\n        {\n          \"name\": \"rewardBMint\",\n          \"isMut\": false,\n          \"isSigner\": false,\n          \"docs\": [\n            \"Reward B mint\"\n          ]\n        },\n        {\n          \"name\": \"rewardBVault\",\n          \"isMut\": true,\n          \"isSigner\": false,\n          \"docs\": [\n            \"Reward B vault PDA\"\n          ]\n        },\n        {\n          \"name\": \"authority\",\n          \"isMut\": true,\n          \"isSigner\": true,\n          \"docs\": [\n            \"Authority of the pool\"\n          ]\n        },\n        {\n          \"name\": \"base\",\n          \"isMut\": false,\n          \"isSigner\": true,\n          \"docs\": [\n            \"Base\"\n          ]\n        },\n        {\n          \"name\": \"systemProgram\",\n          \"isMut\": false,\n          \"isSigner\": false,\n          \"docs\": [\n            \"System program\"\n          ]\n        },\n        {\n          \"name\": \"tokenProgram\",\n          \"isMut\": false,\n          \"isSigner\": false,\n          \"docs\": [\n            \"SPL Token program\"\n          ]\n        },\n        {\n          \"name\": \"rent\",\n          \"isMut\": false,\n          \"isSigner\": false,\n          \"docs\": [\n            \"Rent\"\n          ]\n        }\n      ],\n      \"args\": [\n        {\n          \"name\": \"rewardDuration\",\n          \"type\": \"u64\"\n        }\n      ]\n    },\n    {\n      \"name\": \"createUser\",\n      \"docs\": [\n        \"Initialize a user staking account\"\n      ],\n      \"accounts\": [\n        {\n          \"name\": \"pool\",\n          \"isMut\": true,\n          \"isSigner\": false,\n          \"docs\": [\n            \"Global accounts for the staking instance.\"\n          ]\n        },\n        {\n          \"name\": \"user\",\n          \"isMut\": true,\n          \"isSigner\": false,\n          \"docs\": [\n            \"User\"\n          ]\n        },\n        {\n          \"name\": \"owner\",\n          \"isMut\": true,\n          \"isSigner\": true,\n          \"docs\": [\n            \"Authority of user account\"\n          ]\n        },\n        {\n          \"name\": \"systemProgram\",\n          \"isMut\": false,\n          \"isSigner\": false,\n          \"docs\": [\n            \"Misc.\"\n          ]\n        }\n      ],\n      \"args\": []\n    },\n    {\n      \"name\": \"pause\",\n      \"docs\": [\n        \"Pause the pool\"\n      ],\n      \"accounts\": [\n        {\n          \"name\": \"pool\",\n          \"isMut\": true,\n          \"isSigner\": false,\n          \"docs\": [\n            \"Global accounts for the staking instance.\"\n          ]\n        },\n        {\n          \"name\": \"authority\",\n          \"isMut\": false,\n          \"isSigner\": true,\n          \"docs\": [\n            \"Authority of the pool\"\n          ]\n        }\n      ],\n      \"args\": []\n    },\n    {\n      \"name\": \"unpause\",\n      \"docs\": [\n        \"Unpauses a previously paused pool. Allowing for funding.\"\n      ],\n      \"accounts\": [\n        {\n          \"name\": \"pool\",\n          \"isMut\": true,\n          \"isSigner\": false,\n          \"docs\": [\n            \"Global accounts for the staking instance.\"\n          ]\n        },\n        {\n          \"name\": \"authority\",\n          \"isMut\": false,\n          \"isSigner\": true,\n          \"docs\": [\n            \"Authority of the pool\"\n          ]\n        }\n      ],\n      \"args\": []\n    },\n    {\n      \"name\": \"deposit\",\n      \"docs\": [\n        \"User deposit tokens in the pool.\"\n      ],\n      \"accounts\": [\n        {\n          \"name\": \"pool\",\n          \"isMut\": true,\n          \"isSigner\": false,\n          \"docs\": [\n            \"Global accounts for the deposit/withdraw instance.\"\n          ]\n        },\n        {\n          \"name\": \"stakingVault\",\n          \"isMut\": true,\n          \"isSigner\": false,\n          \"docs\": [\n            \"Staking vault PDA.\"\n          ]\n        },\n        {\n          \"name\": \"user\",\n          \"isMut\": true,\n          \"isSigner\": false,\n          \"docs\": [\n            \"User.\"\n          ]\n        },\n        {\n          \"name\": \"owner\",\n          \"isMut\": false,\n          \"isSigner\": true,\n          \"docs\": [\n            \"Authority of user\"\n          ]\n        },\n        {\n          \"name\": \"stakeFromAccount\",\n          \"isMut\": true,\n          \"isSigner\": false,\n          \"docs\": [\n            \"User staking ATA\"\n          ]\n        },\n        {\n          \"name\": \"tokenProgram\",\n          \"isMut\": false,\n          \"isSigner\": false,\n          \"docs\": [\n            \"Misc.\"\n          ]\n        }\n      ],\n      \"args\": [\n        {\n          \"name\": \"amount\",\n          \"type\": \"u64\"\n        }\n      ]\n    },\n    {\n      \"name\": \"withdraw\",\n      \"docs\": [\n        \"User withdraw tokens in the pool.\"\n      ],\n      \"accounts\": [\n        {\n          \"name\": \"pool\",\n          \"isMut\": true,\n          \"isSigner\": false,\n          \"docs\": [\n            \"Global accounts for the deposit/withdraw instance.\"\n          ]\n        },\n        {\n          \"name\": \"stakingVault\",\n          \"isMut\": true,\n          \"isSigner\": false,\n          \"docs\": [\n            \"Staking vault PDA.\"\n          ]\n        },\n        {\n          \"name\": \"user\",\n          \"isMut\": true,\n          \"isSigner\": false,\n          \"docs\": [\n            \"User.\"\n          ]\n        },\n        {\n          \"name\": \"owner\",\n          \"isMut\": false,\n          \"isSigner\": true,\n          \"docs\": [\n            \"Authority of user\"\n          ]\n        },\n        {\n          \"name\": \"stakeFromAccount\",\n          \"isMut\": true,\n          \"isSigner\": false,\n          \"docs\": [\n            \"User staking ATA\"\n          ]\n        },\n        {\n          \"name\": \"tokenProgram\",\n          \"isMut\": false,\n          \"isSigner\": false,\n          \"docs\": [\n            \"Misc.\"\n          ]\n        }\n      ],\n      \"args\": [\n        {\n          \"name\": \"sptAmount\",\n          \"type\": \"u64\"\n        }\n      ]\n    },\n    {\n      \"name\": \"authorizeFunder\",\n      \"docs\": [\n        \"Authorize additional funders for the pool\"\n      ],\n      \"accounts\": [\n        {\n          \"name\": \"pool\",\n          \"isMut\": true,\n          \"isSigner\": false,\n          \"docs\": [\n            \"Global accounts for the staking instance.\"\n          ]\n        },\n        {\n          \"name\": \"authority\",\n          \"isMut\": false,\n          \"isSigner\": true,\n          \"docs\": [\n            \"Authority of the pool\"\n          ]\n        }\n      ],\n      \"args\": [\n        {\n          \"name\": \"funderToAdd\",\n          \"type\": \"publicKey\"\n        }\n      ]\n    },\n    {\n      \"name\": \"deauthorizeFunder\",\n      \"docs\": [\n        \"Deauthorize funders for the pool\"\n      ],\n      \"accounts\": [\n        {\n          \"name\": \"pool\",\n          \"isMut\": true,\n          \"isSigner\": false,\n          \"docs\": [\n            \"Global accounts for the staking instance.\"\n          ]\n        },\n        {\n          \"name\": \"authority\",\n          \"isMut\": false,\n          \"isSigner\": true,\n          \"docs\": [\n            \"Authority of the pool\"\n          ]\n        }\n      ],\n      \"args\": [\n        {\n          \"name\": \"funderToRemove\",\n          \"type\": \"publicKey\"\n        }\n      ]\n    },\n    {\n      \"name\": \"fund\",\n      \"docs\": [\n        \"Fund the pool with rewards.  This resets the clock on the end date, pushing it out to the set duration. And, linearly redistributes remaining rewards.\"\n      ],\n      \"accounts\": [\n        {\n          \"name\": \"pool\",\n          \"isMut\": true,\n          \"isSigner\": false,\n          \"docs\": [\n            \"Global accounts for the staking instance.\"\n          ]\n        },\n        {\n          \"name\": \"stakingVault\",\n          \"isMut\": true,\n          \"isSigner\": false,\n          \"docs\": [\n            \"Staking vault PDA\"\n          ]\n        },\n        {\n          \"name\": \"rewardAVault\",\n          \"isMut\": true,\n          \"isSigner\": false,\n          \"docs\": [\n            \"Reward A Vault PDA\"\n          ]\n        },\n        {\n          \"name\": \"rewardBVault\",\n          \"isMut\": true,\n          \"isSigner\": false,\n          \"docs\": [\n            \"Reward B Vault PDA\"\n          ]\n        },\n        {\n          \"name\": \"funder\",\n          \"isMut\": false,\n          \"isSigner\": true,\n          \"docs\": [\n            \"Funder\"\n          ]\n        },\n        {\n          \"name\": \"fromA\",\n          \"isMut\": true,\n          \"isSigner\": false,\n          \"docs\": [\n            \"Funder reward A ATA\"\n          ]\n        },\n        {\n          \"name\": \"fromB\",\n          \"isMut\": true,\n          \"isSigner\": false,\n          \"docs\": [\n            \"Funder reward B ATA\"\n          ]\n        },\n        {\n          \"name\": \"tokenProgram\",\n          \"isMut\": false,\n          \"isSigner\": false,\n          \"docs\": [\n            \"Misc.\"\n          ]\n        }\n      ],\n      \"args\": [\n        {\n          \"name\": \"amountA\",\n          \"type\": \"u64\"\n        },\n        {\n          \"name\": \"amountB\",\n          \"type\": \"u64\"\n        }\n      ]\n    },\n    {\n      \"name\": \"claim\",\n      \"docs\": [\n        \"User claim rewards\"\n      ],\n      \"accounts\": [\n        {\n          \"name\": \"pool\",\n          \"isMut\": true,\n          \"isSigner\": false,\n          \"docs\": [\n            \"Global accounts for the staking instance.\"\n          ]\n        },\n        {\n          \"name\": \"stakingVault\",\n          \"isMut\": true,\n          \"isSigner\": false,\n          \"docs\": [\n            \"Staking vault PDA.\"\n          ]\n        },\n        {\n          \"name\": \"rewardAVault\",\n          \"isMut\": true,\n          \"isSigner\": false,\n          \"docs\": [\n            \"Reward A Vault PDA\"\n          ]\n        },\n        {\n          \"name\": \"rewardBVault\",\n          \"isMut\": true,\n          \"isSigner\": false,\n          \"docs\": [\n            \"Reward B Vault PDA\"\n          ]\n        },\n        {\n          \"name\": \"user\",\n          \"isMut\": true,\n          \"isSigner\": false,\n          \"docs\": [\n            \"User.\"\n          ]\n        },\n        {\n          \"name\": \"owner\",\n          \"isMut\": false,\n          \"isSigner\": true,\n          \"docs\": [\n            \"Authority of user\"\n          ]\n        },\n        {\n          \"name\": \"rewardAAccount\",\n          \"isMut\": true,\n          \"isSigner\": false,\n          \"docs\": [\n            \"User's Reward A ATA\"\n          ]\n        },\n        {\n          \"name\": \"rewardBAccount\",\n          \"isMut\": true,\n          \"isSigner\": false,\n          \"docs\": [\n            \"User's Reward B ATA\"\n          ]\n        },\n        {\n          \"name\": \"tokenProgram\",\n          \"isMut\": false,\n          \"isSigner\": false\n        }\n      ],\n      \"args\": []\n    },\n    {\n      \"name\": \"withdrawExtraToken\",\n      \"docs\": [\n        \"Withdraw token that mistakenly deposited to staking_vault\"\n      ],\n      \"accounts\": [\n        {\n          \"name\": \"pool\",\n          \"isMut\": false,\n          \"isSigner\": false,\n          \"docs\": [\n            \"Global accounts for the staking instance.\"\n          ]\n        },\n        {\n          \"name\": \"stakingVault\",\n          \"isMut\": true,\n          \"isSigner\": false,\n          \"docs\": [\n            \"Staking vault PDA\"\n          ]\n        },\n        {\n          \"name\": \"withdrawToAccount\",\n          \"isMut\": true,\n          \"isSigner\": false,\n          \"docs\": [\n            \"Token account to receive mistakenly deposited token\"\n          ]\n        },\n        {\n          \"name\": \"authority\",\n          \"isMut\": false,\n          \"isSigner\": true,\n          \"docs\": [\n            \"Authority of the staking instance\"\n          ]\n        },\n        {\n          \"name\": \"tokenProgram\",\n          \"isMut\": false,\n          \"isSigner\": false,\n          \"docs\": [\n            \"Misc.\"\n          ]\n        }\n      ],\n      \"args\": []\n    },\n    {\n      \"name\": \"closeUser\",\n      \"docs\": [\n        \"Closes a users stake account. Validation is done to ensure this is only allowed when the user has nothing staked and no rewards pending.\"\n      ],\n      \"accounts\": [\n        {\n          \"name\": \"pool\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"user\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"owner\",\n          \"isMut\": true,\n          \"isSigner\": true\n        }\n      ],\n      \"args\": []\n    },\n    {\n      \"name\": \"migrateFarmingRate\",\n      \"docs\": [\n        \"anyone can call this\"\n      ],\n      \"accounts\": [\n        {\n          \"name\": \"pool\",\n          \"isMut\": true,\n          \"isSigner\": false\n        }\n      ],\n      \"args\": []\n    },\n    {\n      \"name\": \"closePool\",\n      \"docs\": [\n        \"Closes a pool account. Only able to be done when there are no users staked.\"\n      ],\n      \"accounts\": [\n        {\n          \"name\": \"refundee\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"stakingRefundee\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"rewardARefundee\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"rewardBRefundee\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"pool\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"authority\",\n          \"isMut\": false,\n          \"isSigner\": true\n        },\n        {\n          \"name\": \"stakingVault\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"rewardAVault\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"rewardBVault\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"tokenProgram\",\n          \"isMut\": false,\n          \"isSigner\": false\n        }\n      ],\n      \"args\": []\n    }\n  ],\n  \"accounts\": [\n    {\n      \"name\": \"pool\",\n      \"docs\": [\n        \"Pool account wrapper\"\n      ],\n      \"type\": {\n        \"kind\": \"struct\",\n        \"fields\": [\n          {\n            \"name\": \"authority\",\n            \"docs\": [\n              \"Privileged account.\"\n            ],\n            \"type\": \"publicKey\"\n          },\n          {\n            \"name\": \"paused\",\n            \"docs\": [\n              \"Paused state of the program\"\n            ],\n            \"type\": \"bool\"\n          },\n          {\n            \"name\": \"stakingMint\",\n            \"docs\": [\n              \"Mint of the token that can be staked.\"\n            ],\n            \"type\": \"publicKey\"\n          },\n          {\n            \"name\": \"stakingVault\",\n            \"docs\": [\n              \"Vault to store staked tokens.\"\n            ],\n            \"type\": \"publicKey\"\n          },\n          {\n            \"name\": \"rewardAMint\",\n            \"docs\": [\n              \"Mint of the reward A token.\"\n            ],\n            \"type\": \"publicKey\"\n          },\n          {\n            \"name\": \"rewardAVault\",\n            \"docs\": [\n              \"Vault to store reward A tokens.\"\n            ],\n            \"type\": \"publicKey\"\n          },\n          {\n            \"name\": \"rewardBMint\",\n            \"docs\": [\n              \"Mint of the reward B token.\"\n            ],\n            \"type\": \"publicKey\"\n          },\n          {\n            \"name\": \"rewardBVault\",\n            \"docs\": [\n              \"Vault to store reward B tokens.\"\n            ],\n            \"type\": \"publicKey\"\n          },\n          {\n            \"name\": \"baseKey\",\n            \"docs\": [\n              \"Base key\"\n            ],\n            \"type\": \"publicKey\"\n          },\n          {\n            \"name\": \"rewardDuration\",\n            \"docs\": [\n              \"The period which rewards are linearly distributed.\"\n            ],\n            \"type\": \"u64\"\n          },\n          {\n            \"name\": \"rewardDurationEnd\",\n            \"docs\": [\n              \"The timestamp at which the current reward period ends.\"\n            ],\n            \"type\": \"u64\"\n          },\n          {\n            \"name\": \"lastUpdateTime\",\n            \"docs\": [\n              \"The last time reward states were updated.\"\n            ],\n            \"type\": \"u64\"\n          },\n          {\n            \"name\": \"rewardARate\",\n            \"docs\": [\n              \"deprecated field\"\n            ],\n            \"type\": \"u64\"\n          },\n          {\n            \"name\": \"rewardBRate\",\n            \"docs\": [\n              \"deprecated field\"\n            ],\n            \"type\": \"u64\"\n          },\n          {\n            \"name\": \"rewardAPerTokenStored\",\n            \"docs\": [\n              \"Last calculated reward A per pool token.\"\n            ],\n            \"type\": \"u128\"\n          },\n          {\n            \"name\": \"rewardBPerTokenStored\",\n            \"docs\": [\n              \"Last calculated reward B per pool token.\"\n            ],\n            \"type\": \"u128\"\n          },\n          {\n            \"name\": \"userStakeCount\",\n            \"docs\": [\n              \"Users staked\"\n            ],\n            \"type\": \"u32\"\n          },\n          {\n            \"name\": \"funders\",\n            \"docs\": [\n              \"authorized funders\",\n              \"[] because short size, fixed account size, and ease of use on\",\n              \"client due to auto generated account size property\"\n            ],\n            \"type\": {\n              \"array\": [\n                \"publicKey\",\n                3\n              ]\n            }\n          },\n          {\n            \"name\": \"rewardARateU128\",\n            \"docs\": [\n              \"reward_a_rate in u128 form\"\n            ],\n            \"type\": \"u128\"\n          },\n          {\n            \"name\": \"rewardBRateU128\",\n            \"docs\": [\n              \"reward_b_rate in u128 form\"\n            ],\n            \"type\": \"u128\"\n          },\n          {\n            \"name\": \"poolBump\",\n            \"docs\": [\n              \"Pool bump\"\n            ],\n            \"type\": \"u8\"\n          },\n          {\n            \"name\": \"totalStaked\",\n            \"docs\": [\n              \"Total staked amount\"\n            ],\n            \"type\": \"u64\"\n          }\n        ]\n      }\n    },\n    {\n      \"name\": \"user\",\n      \"docs\": [\n        \"Farming user account\"\n      ],\n      \"type\": {\n        \"kind\": \"struct\",\n        \"fields\": [\n          {\n            \"name\": \"pool\",\n            \"docs\": [\n              \"Pool the this user belongs to.\"\n            ],\n            \"type\": \"publicKey\"\n          },\n          {\n            \"name\": \"owner\",\n            \"docs\": [\n              \"The owner of this account.\"\n            ],\n            \"type\": \"publicKey\"\n          },\n          {\n            \"name\": \"rewardAPerTokenComplete\",\n            \"docs\": [\n              \"The amount of token A claimed.\"\n            ],\n            \"type\": \"u128\"\n          },\n          {\n            \"name\": \"rewardBPerTokenComplete\",\n            \"docs\": [\n              \"The amount of token B claimed.\"\n            ],\n            \"type\": \"u128\"\n          },\n          {\n            \"name\": \"rewardAPerTokenPending\",\n            \"docs\": [\n              \"The amount of token A pending claim.\"\n            ],\n            \"type\": \"u64\"\n          },\n          {\n            \"name\": \"rewardBPerTokenPending\",\n            \"docs\": [\n              \"The amount of token B pending claim.\"\n            ],\n            \"type\": \"u64\"\n          },\n          {\n            \"name\": \"balanceStaked\",\n            \"docs\": [\n              \"The amount staked.\"\n            ],\n            \"type\": \"u64\"\n          },\n          {\n            \"name\": \"nonce\",\n            \"docs\": [\n              \"Signer nonce.\"\n            ],\n            \"type\": \"u8\"\n          }\n        ]\n      }\n    }\n  ],\n  \"events\": [\n    {\n      \"name\": \"EventDeposit\",\n      \"fields\": [\n        {\n          \"name\": \"amount\",\n          \"type\": \"u64\",\n          \"index\": false\n        }\n      ]\n    },\n    {\n      \"name\": \"EventWithdraw\",\n      \"fields\": [\n        {\n          \"name\": \"amount\",\n          \"type\": \"u64\",\n          \"index\": false\n        }\n      ]\n    },\n    {\n      \"name\": \"EventFund\",\n      \"fields\": [\n        {\n          \"name\": \"amountA\",\n          \"type\": \"u64\",\n          \"index\": false\n        },\n        {\n          \"name\": \"amountB\",\n          \"type\": \"u64\",\n          \"index\": false\n        }\n      ]\n    },\n    {\n      \"name\": \"EventClaim\",\n      \"fields\": [\n        {\n          \"name\": \"amountA\",\n          \"type\": \"u64\",\n          \"index\": false\n        },\n        {\n          \"name\": \"amountB\",\n          \"type\": \"u64\",\n          \"index\": false\n        }\n      ]\n    },\n    {\n      \"name\": \"EventAuthorizeFunder\",\n      \"fields\": [\n        {\n          \"name\": \"newFunder\",\n          \"type\": \"publicKey\",\n          \"index\": false\n        }\n      ]\n    },\n    {\n      \"name\": \"EventUnauthorizeFunder\",\n      \"fields\": [\n        {\n          \"name\": \"funder\",\n          \"type\": \"publicKey\",\n          \"index\": false\n        }\n      ]\n    }\n  ],\n  \"errors\": [\n    {\n      \"code\": 6000,\n      \"name\": \"InsufficientFundWithdraw\",\n      \"msg\": \"Insufficient funds to withdraw.\"\n    },\n    {\n      \"code\": 6001,\n      \"name\": \"AmountMustBeGreaterThanZero\",\n      \"msg\": \"Amount must be greater than zero.\"\n    },\n    {\n      \"code\": 6002,\n      \"name\": \"SingleDepositTokenBCannotBeFunded\",\n      \"msg\": \"Reward B cannot be funded - pool is single deposit.\"\n    },\n    {\n      \"code\": 6003,\n      \"name\": \"PoolPaused\",\n      \"msg\": \"Pool is paused.\"\n    },\n    {\n      \"code\": 6004,\n      \"name\": \"DurationTooShort\",\n      \"msg\": \"Duration cannot be shorter than one day.\"\n    },\n    {\n      \"code\": 6005,\n      \"name\": \"FunderAlreadyAuthorized\",\n      \"msg\": \"Provided funder is already authorized to fund.\"\n    },\n    {\n      \"code\": 6006,\n      \"name\": \"MaxFunders\",\n      \"msg\": \"Maximum funders already authorized.\"\n    },\n    {\n      \"code\": 6007,\n      \"name\": \"CannotDeauthorizePoolAuthority\",\n      \"msg\": \"Cannot deauthorize the primary pool authority.\"\n    },\n    {\n      \"code\": 6008,\n      \"name\": \"CannotDeauthorizeMissingAuthority\",\n      \"msg\": \"Authority not found for deauthorization.\"\n    },\n    {\n      \"code\": 6009,\n      \"name\": \"MathOverflow\",\n      \"msg\": \"Math operation overflow\"\n    }\n  ]\n};\n\nexport const IDL: Farming = {\n  \"version\": \"0.2.2\",\n  \"name\": \"farming\",\n  \"docs\": [\n    \"Dual farming program\"\n  ],\n  \"instructions\": [\n    {\n      \"name\": \"initializePool\",\n      \"docs\": [\n        \"Initializes a new pool. Able to create pool with single reward by passing the same Mint account for reward_a_mint and reward_a_mint\"\n      ],\n      \"accounts\": [\n        {\n          \"name\": \"pool\",\n          \"isMut\": true,\n          \"isSigner\": false,\n          \"docs\": [\n            \"Global accounts for the staking instance.\"\n          ]\n        },\n        {\n          \"name\": \"stakingMint\",\n          \"isMut\": false,\n          \"isSigner\": false,\n          \"docs\": [\n            \"Staking mint\"\n          ]\n        },\n        {\n          \"name\": \"stakingVault\",\n          \"isMut\": true,\n          \"isSigner\": false,\n          \"docs\": [\n            \"Staking vault PDA\"\n          ]\n        },\n        {\n          \"name\": \"rewardAMint\",\n          \"isMut\": false,\n          \"isSigner\": false,\n          \"docs\": [\n            \"Reward A mint\"\n          ]\n        },\n        {\n          \"name\": \"rewardAVault\",\n          \"isMut\": true,\n          \"isSigner\": false,\n          \"docs\": [\n            \"Reward A vault PDA\"\n          ]\n        },\n        {\n          \"name\": \"rewardBMint\",\n          \"isMut\": false,\n          \"isSigner\": false,\n          \"docs\": [\n            \"Reward B mint\"\n          ]\n        },\n        {\n          \"name\": \"rewardBVault\",\n          \"isMut\": true,\n          \"isSigner\": false,\n          \"docs\": [\n            \"Reward B vault PDA\"\n          ]\n        },\n        {\n          \"name\": \"authority\",\n          \"isMut\": true,\n          \"isSigner\": true,\n          \"docs\": [\n            \"Authority of the pool\"\n          ]\n        },\n        {\n          \"name\": \"base\",\n          \"isMut\": false,\n          \"isSigner\": true,\n          \"docs\": [\n            \"Base\"\n          ]\n        },\n        {\n          \"name\": \"systemProgram\",\n          \"isMut\": false,\n          \"isSigner\": false,\n          \"docs\": [\n            \"System program\"\n          ]\n        },\n        {\n          \"name\": \"tokenProgram\",\n          \"isMut\": false,\n          \"isSigner\": false,\n          \"docs\": [\n            \"SPL Token program\"\n          ]\n        },\n        {\n          \"name\": \"rent\",\n          \"isMut\": false,\n          \"isSigner\": false,\n          \"docs\": [\n            \"Rent\"\n          ]\n        }\n      ],\n      \"args\": [\n        {\n          \"name\": \"rewardDuration\",\n          \"type\": \"u64\"\n        }\n      ]\n    },\n    {\n      \"name\": \"createUser\",\n      \"docs\": [\n        \"Initialize a user staking account\"\n      ],\n      \"accounts\": [\n        {\n          \"name\": \"pool\",\n          \"isMut\": true,\n          \"isSigner\": false,\n          \"docs\": [\n            \"Global accounts for the staking instance.\"\n          ]\n        },\n        {\n          \"name\": \"user\",\n          \"isMut\": true,\n          \"isSigner\": false,\n          \"docs\": [\n            \"User\"\n          ]\n        },\n        {\n          \"name\": \"owner\",\n          \"isMut\": true,\n          \"isSigner\": true,\n          \"docs\": [\n            \"Authority of user account\"\n          ]\n        },\n        {\n          \"name\": \"systemProgram\",\n          \"isMut\": false,\n          \"isSigner\": false,\n          \"docs\": [\n            \"Misc.\"\n          ]\n        }\n      ],\n      \"args\": []\n    },\n    {\n      \"name\": \"pause\",\n      \"docs\": [\n        \"Pause the pool\"\n      ],\n      \"accounts\": [\n        {\n          \"name\": \"pool\",\n          \"isMut\": true,\n          \"isSigner\": false,\n          \"docs\": [\n            \"Global accounts for the staking instance.\"\n          ]\n        },\n        {\n          \"name\": \"authority\",\n          \"isMut\": false,\n          \"isSigner\": true,\n          \"docs\": [\n            \"Authority of the pool\"\n          ]\n        }\n      ],\n      \"args\": []\n    },\n    {\n      \"name\": \"unpause\",\n      \"docs\": [\n        \"Unpauses a previously paused pool. Allowing for funding.\"\n      ],\n      \"accounts\": [\n        {\n          \"name\": \"pool\",\n          \"isMut\": true,\n          \"isSigner\": false,\n          \"docs\": [\n            \"Global accounts for the staking instance.\"\n          ]\n        },\n        {\n          \"name\": \"authority\",\n          \"isMut\": false,\n          \"isSigner\": true,\n          \"docs\": [\n            \"Authority of the pool\"\n          ]\n        }\n      ],\n      \"args\": []\n    },\n    {\n      \"name\": \"deposit\",\n      \"docs\": [\n        \"User deposit tokens in the pool.\"\n      ],\n      \"accounts\": [\n        {\n          \"name\": \"pool\",\n          \"isMut\": true,\n          \"isSigner\": false,\n          \"docs\": [\n            \"Global accounts for the deposit/withdraw instance.\"\n          ]\n        },\n        {\n          \"name\": \"stakingVault\",\n          \"isMut\": true,\n          \"isSigner\": false,\n          \"docs\": [\n            \"Staking vault PDA.\"\n          ]\n        },\n        {\n          \"name\": \"user\",\n          \"isMut\": true,\n          \"isSigner\": false,\n          \"docs\": [\n            \"User.\"\n          ]\n        },\n        {\n          \"name\": \"owner\",\n          \"isMut\": false,\n          \"isSigner\": true,\n          \"docs\": [\n            \"Authority of user\"\n          ]\n        },\n        {\n          \"name\": \"stakeFromAccount\",\n          \"isMut\": true,\n          \"isSigner\": false,\n          \"docs\": [\n            \"User staking ATA\"\n          ]\n        },\n        {\n          \"name\": \"tokenProgram\",\n          \"isMut\": false,\n          \"isSigner\": false,\n          \"docs\": [\n            \"Misc.\"\n          ]\n        }\n      ],\n      \"args\": [\n        {\n          \"name\": \"amount\",\n          \"type\": \"u64\"\n        }\n      ]\n    },\n    {\n      \"name\": \"withdraw\",\n      \"docs\": [\n        \"User withdraw tokens in the pool.\"\n      ],\n      \"accounts\": [\n        {\n          \"name\": \"pool\",\n          \"isMut\": true,\n          \"isSigner\": false,\n          \"docs\": [\n            \"Global accounts for the deposit/withdraw instance.\"\n          ]\n        },\n        {\n          \"name\": \"stakingVault\",\n          \"isMut\": true,\n          \"isSigner\": false,\n          \"docs\": [\n            \"Staking vault PDA.\"\n          ]\n        },\n        {\n          \"name\": \"user\",\n          \"isMut\": true,\n          \"isSigner\": false,\n          \"docs\": [\n            \"User.\"\n          ]\n        },\n        {\n          \"name\": \"owner\",\n          \"isMut\": false,\n          \"isSigner\": true,\n          \"docs\": [\n            \"Authority of user\"\n          ]\n        },\n        {\n          \"name\": \"stakeFromAccount\",\n          \"isMut\": true,\n          \"isSigner\": false,\n          \"docs\": [\n            \"User staking ATA\"\n          ]\n        },\n        {\n          \"name\": \"tokenProgram\",\n          \"isMut\": false,\n          \"isSigner\": false,\n          \"docs\": [\n            \"Misc.\"\n          ]\n        }\n      ],\n      \"args\": [\n        {\n          \"name\": \"sptAmount\",\n          \"type\": \"u64\"\n        }\n      ]\n    },\n    {\n      \"name\": \"authorizeFunder\",\n      \"docs\": [\n        \"Authorize additional funders for the pool\"\n      ],\n      \"accounts\": [\n        {\n          \"name\": \"pool\",\n          \"isMut\": true,\n          \"isSigner\": false,\n          \"docs\": [\n            \"Global accounts for the staking instance.\"\n          ]\n        },\n        {\n          \"name\": \"authority\",\n          \"isMut\": false,\n          \"isSigner\": true,\n          \"docs\": [\n            \"Authority of the pool\"\n          ]\n        }\n      ],\n      \"args\": [\n        {\n          \"name\": \"funderToAdd\",\n          \"type\": \"publicKey\"\n        }\n      ]\n    },\n    {\n      \"name\": \"deauthorizeFunder\",\n      \"docs\": [\n        \"Deauthorize funders for the pool\"\n      ],\n      \"accounts\": [\n        {\n          \"name\": \"pool\",\n          \"isMut\": true,\n          \"isSigner\": false,\n          \"docs\": [\n            \"Global accounts for the staking instance.\"\n          ]\n        },\n        {\n          \"name\": \"authority\",\n          \"isMut\": false,\n          \"isSigner\": true,\n          \"docs\": [\n            \"Authority of the pool\"\n          ]\n        }\n      ],\n      \"args\": [\n        {\n          \"name\": \"funderToRemove\",\n          \"type\": \"publicKey\"\n        }\n      ]\n    },\n    {\n      \"name\": \"fund\",\n      \"docs\": [\n        \"Fund the pool with rewards.  This resets the clock on the end date, pushing it out to the set duration. And, linearly redistributes remaining rewards.\"\n      ],\n      \"accounts\": [\n        {\n          \"name\": \"pool\",\n          \"isMut\": true,\n          \"isSigner\": false,\n          \"docs\": [\n            \"Global accounts for the staking instance.\"\n          ]\n        },\n        {\n          \"name\": \"stakingVault\",\n          \"isMut\": true,\n          \"isSigner\": false,\n          \"docs\": [\n            \"Staking vault PDA\"\n          ]\n        },\n        {\n          \"name\": \"rewardAVault\",\n          \"isMut\": true,\n          \"isSigner\": false,\n          \"docs\": [\n            \"Reward A Vault PDA\"\n          ]\n        },\n        {\n          \"name\": \"rewardBVault\",\n          \"isMut\": true,\n          \"isSigner\": false,\n          \"docs\": [\n            \"Reward B Vault PDA\"\n          ]\n        },\n        {\n          \"name\": \"funder\",\n          \"isMut\": false,\n          \"isSigner\": true,\n          \"docs\": [\n            \"Funder\"\n          ]\n        },\n        {\n          \"name\": \"fromA\",\n          \"isMut\": true,\n          \"isSigner\": false,\n          \"docs\": [\n            \"Funder reward A ATA\"\n          ]\n        },\n        {\n          \"name\": \"fromB\",\n          \"isMut\": true,\n          \"isSigner\": false,\n          \"docs\": [\n            \"Funder reward B ATA\"\n          ]\n        },\n        {\n          \"name\": \"tokenProgram\",\n          \"isMut\": false,\n          \"isSigner\": false,\n          \"docs\": [\n            \"Misc.\"\n          ]\n        }\n      ],\n      \"args\": [\n        {\n          \"name\": \"amountA\",\n          \"type\": \"u64\"\n        },\n        {\n          \"name\": \"amountB\",\n          \"type\": \"u64\"\n        }\n      ]\n    },\n    {\n      \"name\": \"claim\",\n      \"docs\": [\n        \"User claim rewards\"\n      ],\n      \"accounts\": [\n        {\n          \"name\": \"pool\",\n          \"isMut\": true,\n          \"isSigner\": false,\n          \"docs\": [\n            \"Global accounts for the staking instance.\"\n          ]\n        },\n        {\n          \"name\": \"stakingVault\",\n          \"isMut\": true,\n          \"isSigner\": false,\n          \"docs\": [\n            \"Staking vault PDA.\"\n          ]\n        },\n        {\n          \"name\": \"rewardAVault\",\n          \"isMut\": true,\n          \"isSigner\": false,\n          \"docs\": [\n            \"Reward A Vault PDA\"\n          ]\n        },\n        {\n          \"name\": \"rewardBVault\",\n          \"isMut\": true,\n          \"isSigner\": false,\n          \"docs\": [\n            \"Reward B Vault PDA\"\n          ]\n        },\n        {\n          \"name\": \"user\",\n          \"isMut\": true,\n          \"isSigner\": false,\n          \"docs\": [\n            \"User.\"\n          ]\n        },\n        {\n          \"name\": \"owner\",\n          \"isMut\": false,\n          \"isSigner\": true,\n          \"docs\": [\n            \"Authority of user\"\n          ]\n        },\n        {\n          \"name\": \"rewardAAccount\",\n          \"isMut\": true,\n          \"isSigner\": false,\n          \"docs\": [\n            \"User's Reward A ATA\"\n          ]\n        },\n        {\n          \"name\": \"rewardBAccount\",\n          \"isMut\": true,\n          \"isSigner\": false,\n          \"docs\": [\n            \"User's Reward B ATA\"\n          ]\n        },\n        {\n          \"name\": \"tokenProgram\",\n          \"isMut\": false,\n          \"isSigner\": false\n        }\n      ],\n      \"args\": []\n    },\n    {\n      \"name\": \"withdrawExtraToken\",\n      \"docs\": [\n        \"Withdraw token that mistakenly deposited to staking_vault\"\n      ],\n      \"accounts\": [\n        {\n          \"name\": \"pool\",\n          \"isMut\": false,\n          \"isSigner\": false,\n          \"docs\": [\n            \"Global accounts for the staking instance.\"\n          ]\n        },\n        {\n          \"name\": \"stakingVault\",\n          \"isMut\": true,\n          \"isSigner\": false,\n          \"docs\": [\n            \"Staking vault PDA\"\n          ]\n        },\n        {\n          \"name\": \"withdrawToAccount\",\n          \"isMut\": true,\n          \"isSigner\": false,\n          \"docs\": [\n            \"Token account to receive mistakenly deposited token\"\n          ]\n        },\n        {\n          \"name\": \"authority\",\n          \"isMut\": false,\n          \"isSigner\": true,\n          \"docs\": [\n            \"Authority of the staking instance\"\n          ]\n        },\n        {\n          \"name\": \"tokenProgram\",\n          \"isMut\": false,\n          \"isSigner\": false,\n          \"docs\": [\n            \"Misc.\"\n          ]\n        }\n      ],\n      \"args\": []\n    },\n    {\n      \"name\": \"closeUser\",\n      \"docs\": [\n        \"Closes a users stake account. Validation is done to ensure this is only allowed when the user has nothing staked and no rewards pending.\"\n      ],\n      \"accounts\": [\n        {\n          \"name\": \"pool\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"user\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"owner\",\n          \"isMut\": true,\n          \"isSigner\": true\n        }\n      ],\n      \"args\": []\n    },\n    {\n      \"name\": \"migrateFarmingRate\",\n      \"docs\": [\n        \"anyone can call this\"\n      ],\n      \"accounts\": [\n        {\n          \"name\": \"pool\",\n          \"isMut\": true,\n          \"isSigner\": false\n        }\n      ],\n      \"args\": []\n    },\n    {\n      \"name\": \"closePool\",\n      \"docs\": [\n        \"Closes a pool account. Only able to be done when there are no users staked.\"\n      ],\n      \"accounts\": [\n        {\n          \"name\": \"refundee\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"stakingRefundee\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"rewardARefundee\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"rewardBRefundee\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"pool\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"authority\",\n          \"isMut\": false,\n          \"isSigner\": true\n        },\n        {\n          \"name\": \"stakingVault\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"rewardAVault\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"rewardBVault\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"tokenProgram\",\n          \"isMut\": false,\n          \"isSigner\": false\n        }\n      ],\n      \"args\": []\n    }\n  ],\n  \"accounts\": [\n    {\n      \"name\": \"pool\",\n      \"docs\": [\n        \"Pool account wrapper\"\n      ],\n      \"type\": {\n        \"kind\": \"struct\",\n        \"fields\": [\n          {\n            \"name\": \"authority\",\n            \"docs\": [\n              \"Privileged account.\"\n            ],\n            \"type\": \"publicKey\"\n          },\n          {\n            \"name\": \"paused\",\n            \"docs\": [\n              \"Paused state of the program\"\n            ],\n            \"type\": \"bool\"\n          },\n          {\n            \"name\": \"stakingMint\",\n            \"docs\": [\n              \"Mint of the token that can be staked.\"\n            ],\n            \"type\": \"publicKey\"\n          },\n          {\n            \"name\": \"stakingVault\",\n            \"docs\": [\n              \"Vault to store staked tokens.\"\n            ],\n            \"type\": \"publicKey\"\n          },\n          {\n            \"name\": \"rewardAMint\",\n            \"docs\": [\n              \"Mint of the reward A token.\"\n            ],\n            \"type\": \"publicKey\"\n          },\n          {\n            \"name\": \"rewardAVault\",\n            \"docs\": [\n              \"Vault to store reward A tokens.\"\n            ],\n            \"type\": \"publicKey\"\n          },\n          {\n            \"name\": \"rewardBMint\",\n            \"docs\": [\n              \"Mint of the reward B token.\"\n            ],\n            \"type\": \"publicKey\"\n          },\n          {\n            \"name\": \"rewardBVault\",\n            \"docs\": [\n              \"Vault to store reward B tokens.\"\n            ],\n            \"type\": \"publicKey\"\n          },\n          {\n            \"name\": \"baseKey\",\n            \"docs\": [\n              \"Base key\"\n            ],\n            \"type\": \"publicKey\"\n          },\n          {\n            \"name\": \"rewardDuration\",\n            \"docs\": [\n              \"The period which rewards are linearly distributed.\"\n            ],\n            \"type\": \"u64\"\n          },\n          {\n            \"name\": \"rewardDurationEnd\",\n            \"docs\": [\n              \"The timestamp at which the current reward period ends.\"\n            ],\n            \"type\": \"u64\"\n          },\n          {\n            \"name\": \"lastUpdateTime\",\n            \"docs\": [\n              \"The last time reward states were updated.\"\n            ],\n            \"type\": \"u64\"\n          },\n          {\n            \"name\": \"rewardARate\",\n            \"docs\": [\n              \"deprecated field\"\n            ],\n            \"type\": \"u64\"\n          },\n          {\n            \"name\": \"rewardBRate\",\n            \"docs\": [\n              \"deprecated field\"\n            ],\n            \"type\": \"u64\"\n          },\n          {\n            \"name\": \"rewardAPerTokenStored\",\n            \"docs\": [\n              \"Last calculated reward A per pool token.\"\n            ],\n            \"type\": \"u128\"\n          },\n          {\n            \"name\": \"rewardBPerTokenStored\",\n            \"docs\": [\n              \"Last calculated reward B per pool token.\"\n            ],\n            \"type\": \"u128\"\n          },\n          {\n            \"name\": \"userStakeCount\",\n            \"docs\": [\n              \"Users staked\"\n            ],\n            \"type\": \"u32\"\n          },\n          {\n            \"name\": \"funders\",\n            \"docs\": [\n              \"authorized funders\",\n              \"[] because short size, fixed account size, and ease of use on\",\n              \"client due to auto generated account size property\"\n            ],\n            \"type\": {\n              \"array\": [\n                \"publicKey\",\n                3\n              ]\n            }\n          },\n          {\n            \"name\": \"rewardARateU128\",\n            \"docs\": [\n              \"reward_a_rate in u128 form\"\n            ],\n            \"type\": \"u128\"\n          },\n          {\n            \"name\": \"rewardBRateU128\",\n            \"docs\": [\n              \"reward_b_rate in u128 form\"\n            ],\n            \"type\": \"u128\"\n          },\n          {\n            \"name\": \"poolBump\",\n            \"docs\": [\n              \"Pool bump\"\n            ],\n            \"type\": \"u8\"\n          },\n          {\n            \"name\": \"totalStaked\",\n            \"docs\": [\n              \"Total staked amount\"\n            ],\n            \"type\": \"u64\"\n          }\n        ]\n      }\n    },\n    {\n      \"name\": \"user\",\n      \"docs\": [\n        \"Farming user account\"\n      ],\n      \"type\": {\n        \"kind\": \"struct\",\n        \"fields\": [\n          {\n            \"name\": \"pool\",\n            \"docs\": [\n              \"Pool the this user belongs to.\"\n            ],\n            \"type\": \"publicKey\"\n          },\n          {\n            \"name\": \"owner\",\n            \"docs\": [\n              \"The owner of this account.\"\n            ],\n            \"type\": \"publicKey\"\n          },\n          {\n            \"name\": \"rewardAPerTokenComplete\",\n            \"docs\": [\n              \"The amount of token A claimed.\"\n            ],\n            \"type\": \"u128\"\n          },\n          {\n            \"name\": \"rewardBPerTokenComplete\",\n            \"docs\": [\n              \"The amount of token B claimed.\"\n            ],\n            \"type\": \"u128\"\n          },\n          {\n            \"name\": \"rewardAPerTokenPending\",\n            \"docs\": [\n              \"The amount of token A pending claim.\"\n            ],\n            \"type\": \"u64\"\n          },\n          {\n            \"name\": \"rewardBPerTokenPending\",\n            \"docs\": [\n              \"The amount of token B pending claim.\"\n            ],\n            \"type\": \"u64\"\n          },\n          {\n            \"name\": \"balanceStaked\",\n            \"docs\": [\n              \"The amount staked.\"\n            ],\n            \"type\": \"u64\"\n          },\n          {\n            \"name\": \"nonce\",\n            \"docs\": [\n              \"Signer nonce.\"\n            ],\n            \"type\": \"u8\"\n          }\n        ]\n      }\n    }\n  ],\n  \"events\": [\n    {\n      \"name\": \"EventDeposit\",\n      \"fields\": [\n        {\n          \"name\": \"amount\",\n          \"type\": \"u64\",\n          \"index\": false\n        }\n      ]\n    },\n    {\n      \"name\": \"EventWithdraw\",\n      \"fields\": [\n        {\n          \"name\": \"amount\",\n          \"type\": \"u64\",\n          \"index\": false\n        }\n      ]\n    },\n    {\n      \"name\": \"EventFund\",\n      \"fields\": [\n        {\n          \"name\": \"amountA\",\n          \"type\": \"u64\",\n          \"index\": false\n        },\n        {\n          \"name\": \"amountB\",\n          \"type\": \"u64\",\n          \"index\": false\n        }\n      ]\n    },\n    {\n      \"name\": \"EventClaim\",\n      \"fields\": [\n        {\n          \"name\": \"amountA\",\n          \"type\": \"u64\",\n          \"index\": false\n        },\n        {\n          \"name\": \"amountB\",\n          \"type\": \"u64\",\n          \"index\": false\n        }\n      ]\n    },\n    {\n      \"name\": \"EventAuthorizeFunder\",\n      \"fields\": [\n        {\n          \"name\": \"newFunder\",\n          \"type\": \"publicKey\",\n          \"index\": false\n        }\n      ]\n    },\n    {\n      \"name\": \"EventUnauthorizeFunder\",\n      \"fields\": [\n        {\n          \"name\": \"funder\",\n          \"type\": \"publicKey\",\n          \"index\": false\n        }\n      ]\n    }\n  ],\n  \"errors\": [\n    {\n      \"code\": 6000,\n      \"name\": \"InsufficientFundWithdraw\",\n      \"msg\": \"Insufficient funds to withdraw.\"\n    },\n    {\n      \"code\": 6001,\n      \"name\": \"AmountMustBeGreaterThanZero\",\n      \"msg\": \"Amount must be greater than zero.\"\n    },\n    {\n      \"code\": 6002,\n      \"name\": \"SingleDepositTokenBCannotBeFunded\",\n      \"msg\": \"Reward B cannot be funded - pool is single deposit.\"\n    },\n    {\n      \"code\": 6003,\n      \"name\": \"PoolPaused\",\n      \"msg\": \"Pool is paused.\"\n    },\n    {\n      \"code\": 6004,\n      \"name\": \"DurationTooShort\",\n      \"msg\": \"Duration cannot be shorter than one day.\"\n    },\n    {\n      \"code\": 6005,\n      \"name\": \"FunderAlreadyAuthorized\",\n      \"msg\": \"Provided funder is already authorized to fund.\"\n    },\n    {\n      \"code\": 6006,\n      \"name\": \"MaxFunders\",\n      \"msg\": \"Maximum funders already authorized.\"\n    },\n    {\n      \"code\": 6007,\n      \"name\": \"CannotDeauthorizePoolAuthority\",\n      \"msg\": \"Cannot deauthorize the primary pool authority.\"\n    },\n    {\n      \"code\": 6008,\n      \"name\": \"CannotDeauthorizeMissingAuthority\",\n      \"msg\": \"Authority not found for deauthorization.\"\n    },\n    {\n      \"code\": 6009,\n      \"name\": \"MathOverflow\",\n      \"msg\": \"Math operation overflow\"\n    }\n  ]\n};\n","import { ENV, TokenInfo } from \"@solana/spl-token-registry\";\nimport { PublicKey } from \"@solana/web3.js\";\n\nexport const FARMING_API_ENDPOINT = Object.freeze({\n  devnet: \"https://dev-mer-amm.raccoons.dev/farms\",\n  \"mainnet-beta\": \"https://amm.meteora.ag/farms\",\n});\n\nexport const FARM_PROGRAM_ID = new PublicKey(\n  \"FarmuwXPWXvefWUeqFAa5w6rifLkq5X6E8bimYvrhCB1\"\n);\n\nexport const AMM_PROGRAM_ID = new PublicKey(\n  \"Eo7WjKq67rjJQSZxS6z3YkapzY3eMj6Xy8X5EQVn5UaB\"\n);\n\nexport const SIMULATION_USER = new PublicKey(\n  \"HrY9qR5TiB2xPzzvbBu5KrBorMfYGQXh9osXydz4jy9s\"\n);\n\nexport const DEVNET_COIN: Array<TokenInfo> = [\n  {\n    chainId: ENV.Devnet,\n    address: \"So11111111111111111111111111111111111111112\",\n    decimals: 9,\n    name: \"Wrapped SOL\",\n    symbol: \"SOL\",\n    logoURI:\n      \"https://raw.githubusercontent.com/solana-labs/token-list/main/assets/mainnet/So11111111111111111111111111111111111111112/logo.png\",\n    extensions: {\n      coingeckoId: \"solana\",\n      serumV3Usdc: \"9wFFyRfZBsuAha4YcuxcXLKwMxJR43S7fPfQLusDBzvT\",\n      serumV3Usdt: \"HWHvQhFmJB3NUcu1aihKmrKegfVxBEHzwVX6yZCKEsi1\",\n      website: \"https://solana.com/\",\n    },\n  },\n  {\n    chainId: ENV.Devnet,\n    address: \"zVzi5VAf4qMEwzv7NXECVx5v2pQ7xnqVVjCXZwS9XzA\",\n    decimals: 6,\n    name: \"USD Coin\",\n    symbol: \"USDC\",\n    logoURI:\n      \"https://raw.githubusercontent.com/solana-labs/token-list/main/assets/mainnet/EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v/logo.png\",\n    extensions: {\n      coingeckoId: \"usd-coin\",\n      serumV3Usdt: \"77quYg4MGneUdjgXCunt9GgM1usmrxKY31twEy3WHwcS\",\n      website: \"https://www.centre.io/\",\n    },\n  },\n  {\n    chainId: ENV.Devnet,\n    address: \"9NGDi2tZtNmCCp8SVLKNuGjuWAVwNF3Vap5tT8km5er9\",\n    decimals: 9,\n    name: \"USDT\",\n    symbol: \"USDT\",\n    logoURI:\n      \"https://raw.githubusercontent.com/solana-labs/token-list/main/assets/mainnet/Es9vMFrzaCERmJfrF4H2FYD4KCoNkY11McCe8BenwNYB/logo.svg\",\n    tags: [\"stablecoin\"],\n    extensions: {\n      coingeckoId: \"tether\",\n      serumV3Usdc: \"77quYg4MGneUdjgXCunt9GgM1usmrxKY31twEy3WHwcS\",\n      website: \"https://tether.to/\",\n    },\n  },\n];\n"],"mappings":"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","names":["EventParser","TOKEN_PROGRAM_ID","PublicKey","EventParser","PublicKey","TOKEN_PROGRAM_ID"]}